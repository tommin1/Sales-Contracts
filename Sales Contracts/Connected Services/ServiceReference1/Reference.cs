//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/ContractManagement", ConfigurationName="ServiceReference1.ContractManagement_Port")]
    public interface ContractManagement_Port
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/ContractManagement:MergeDim", ReplyAction="*")]
        System.Threading.Tasks.Task<ServiceReference1.MergeDim_Result> MergeDimAsync(ServiceReference1.MergeDim request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class MergeDim
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="MergeDim", Namespace="urn:microsoft-dynamics-schemas/codeunit/ContractManagement", Order=0)]
        public ServiceReference1.MergeDimBody Body;
        
        public MergeDim()
        {
        }
        
        public MergeDim(ServiceReference1.MergeDimBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/ContractManagement")]
    public partial class MergeDimBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public int dimSetID;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public int otherDimSetID;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string globalDimVal1;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public string globalDimVal2;
        
        public MergeDimBody()
        {
        }
        
        public MergeDimBody(int dimSetID, int otherDimSetID, string globalDimVal1, string globalDimVal2)
        {
            this.dimSetID = dimSetID;
            this.otherDimSetID = otherDimSetID;
            this.globalDimVal1 = globalDimVal1;
            this.globalDimVal2 = globalDimVal2;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class MergeDim_Result
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="MergeDim_Result", Namespace="urn:microsoft-dynamics-schemas/codeunit/ContractManagement", Order=0)]
        public ServiceReference1.MergeDim_ResultBody Body;
        
        public MergeDim_Result()
        {
        }
        
        public MergeDim_Result(ServiceReference1.MergeDim_ResultBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/ContractManagement")]
    public partial class MergeDim_ResultBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public int dimSetID;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string globalDimVal1;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string globalDimVal2;
        
        public MergeDim_ResultBody()
        {
        }
        
        public MergeDim_ResultBody(int dimSetID, string globalDimVal1, string globalDimVal2)
        {
            this.dimSetID = dimSetID;
            this.globalDimVal1 = globalDimVal1;
            this.globalDimVal2 = globalDimVal2;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public interface ContractManagement_PortChannel : ServiceReference1.ContractManagement_Port, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public partial class ContractManagement_PortClient : System.ServiceModel.ClientBase<ServiceReference1.ContractManagement_Port>, ServiceReference1.ContractManagement_Port
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ContractManagement_PortClient() : 
                base(ContractManagement_PortClient.GetDefaultBinding(), ContractManagement_PortClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.ContractManagement_Port.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ContractManagement_PortClient(EndpointConfiguration endpointConfiguration) : 
                base(ContractManagement_PortClient.GetBindingForEndpoint(endpointConfiguration), ContractManagement_PortClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ContractManagement_PortClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ContractManagement_PortClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ContractManagement_PortClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ContractManagement_PortClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ContractManagement_PortClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceReference1.MergeDim_Result> ServiceReference1.ContractManagement_Port.MergeDimAsync(ServiceReference1.MergeDim request)
        {
            return base.Channel.MergeDimAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.MergeDim_Result> MergeDimAsync(int dimSetID, int otherDimSetID, string globalDimVal1, string globalDimVal2)
        {
            ServiceReference1.MergeDim inValue = new ServiceReference1.MergeDim();
            inValue.Body = new ServiceReference1.MergeDimBody();
            inValue.Body.dimSetID = dimSetID;
            inValue.Body.otherDimSetID = otherDimSetID;
            inValue.Body.globalDimVal1 = globalDimVal1;
            inValue.Body.globalDimVal2 = globalDimVal2;
            return ((ServiceReference1.ContractManagement_Port)(this)).MergeDimAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ContractManagement_Port))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ContractManagement_Port))
            {
                return new System.ServiceModel.EndpointAddress("http://nb-marven.softera.lt:7047/DynamicsNAV100/WS/CRONUS International Ltd./Code" +
                        "unit/ContractManagement?wsdl");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ContractManagement_PortClient.GetBindingForEndpoint(EndpointConfiguration.ContractManagement_Port);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ContractManagement_PortClient.GetEndpointAddress(EndpointConfiguration.ContractManagement_Port);
        }
        
        public enum EndpointConfiguration
        {
            
            ContractManagement_Port,
        }
    }
}
