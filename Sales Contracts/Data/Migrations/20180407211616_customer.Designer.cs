// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Sales_Contracts.Data;
using System;

namespace Sales_Contracts.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180407211616_customer")]
    partial class customer
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("NAVN.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Address_2");

                    b.Property<decimal?>("AdjCustProfit");

                    b.Property<decimal?>("AdjProfitPct");

                    b.Property<bool?>("Allow_Line_Disc");

                    b.Property<string>("Application_Method");

                    b.Property<decimal?>("Balance_Due");

                    b.Property<decimal?>("Balance_Due_LCY");

                    b.Property<decimal?>("Balance_LCY");

                    b.Property<string>("Base_Calendar_Code");

                    b.Property<string>("Bill_to_Customer_No");

                    b.Property<int?>("Bill_to_Customer_No_LinkID");

                    b.Property<bool?>("Block_Payment_Tolerance");

                    b.Property<string>("Blocked");

                    b.Property<bool?>("BlockedCustomer");

                    b.Property<decimal?>("CalcCreditLimitLCYExpendedPct");

                    b.Property<string>("Cash_Flow_Payment_Terms_Code");

                    b.Property<string>("City");

                    b.Property<bool?>("Combine_Shipments");

                    b.Property<string>("ContactName");

                    b.Property<string>("Copy_Sell_to_Addr_to_Qte_From");

                    b.Property<string>("Country_Region_Code");

                    b.Property<decimal?>("Credit_Limit_LCY");

                    b.Property<string>("Currency_Code");

                    b.Property<string>("Currency_Filter");

                    b.Property<decimal?>("CustInvDiscAmountLCY");

                    b.Property<decimal?>("CustSalesLCY_CustProfit_AdjmtCostLCY");

                    b.Property<decimal?>("CustomerMgt_AvgDaysToPay_No");

                    b.Property<string>("Customer_Disc_Group");

                    b.Property<string>("Customer_Posting_Group");

                    b.Property<string>("Customer_Price_Group");

                    b.Property<string>("Customized_Calendar");

                    b.Property<string>("Date_Filter");

                    b.Property<decimal?>("DaysPaidPastDueDate");

                    b.Property<string>("Document_Sending_Profile");

                    b.Property<string>("ETag");

                    b.Property<string>("E_Mail");

                    b.Property<string>("Fax_No");

                    b.Property<string>("Fin_Charge_Terms_Code");

                    b.Property<string>("GLN");

                    b.Property<string>("Gen_Bus_Posting_Group");

                    b.Property<decimal?>("GetAmountOnCrMemo");

                    b.Property<decimal?>("GetAmountOnOutstandingCrMemos");

                    b.Property<decimal?>("GetAmountOnOutstandingInvoices");

                    b.Property<decimal?>("GetAmountOnPostedInvoices");

                    b.Property<decimal?>("GetMoneyOwedExpected");

                    b.Property<string>("Global_Dimension_1_Filter");

                    b.Property<string>("Global_Dimension_2_Filter");

                    b.Property<string>("Home_Page");

                    b.Property<string>("IC_Partner_Code");

                    b.Property<int?>("Invoice_Copies");

                    b.Property<string>("Invoice_Disc_Code");

                    b.Property<int?>("Invoice_Disc_Code_LinkID");

                    b.Property<string>("Language_Code");

                    b.Property<DateTime?>("Last_Date_Modified");

                    b.Property<int?>("Last_Statement_No");

                    b.Property<string>("Location_Code");

                    b.Property<string>("Name");

                    b.Property<string>("No");

                    b.Property<string>("Partner_Type");

                    b.Property<string>("Payment_Method_Code");

                    b.Property<string>("Payment_Terms_Code");

                    b.Property<decimal?>("Payments_LCY");

                    b.Property<string>("Phone_No");

                    b.Property<string>("Post_Code");

                    b.Property<string>("Preferred_Bank_Account_Code");

                    b.Property<decimal?>("Prepayment_Percent");

                    b.Property<bool?>("Prices_Including_VAT");

                    b.Property<string>("Primary_Contact_No");

                    b.Property<bool?>("Print_Statements");

                    b.Property<string>("Reminder_Terms_Code");

                    b.Property<string>("Reserve");

                    b.Property<string>("Responsibility_Center");

                    b.Property<string>("Salesperson_Code");

                    b.Property<string>("Search_Name");

                    b.Property<string>("Service_Zone_Code");

                    b.Property<string>("Shipment_Method_Code");

                    b.Property<string>("Shipping_Advice");

                    b.Property<string>("Shipping_Agent_Code");

                    b.Property<string>("Shipping_Agent_Service_Code");

                    b.Property<string>("Shipping_Time");

                    b.Property<string>("ShowMap");

                    b.Property<decimal?>("TotalMoneyOwed");

                    b.Property<decimal?>("TotalSales2");

                    b.Property<decimal?>("Totals");

                    b.Property<string>("VAT_Bus_Posting_Group");

                    b.Property<string>("VAT_Registration_No");

                    b.HasKey("ID");

                    b.HasIndex("Bill_to_Customer_No_LinkID");

                    b.HasIndex("Invoice_Disc_Code_LinkID");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("NAVN.CustomerPriceAndLineDisc", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Allow_Invoice_Disc");

                    b.Property<bool?>("Allow_Line_Disc");

                    b.Property<string>("Code");

                    b.Property<string>("Currency_Code");

                    b.Property<int?>("CustomerID");

                    b.Property<string>("ETag");

                    b.Property<DateTime?>("Ending_Date");

                    b.Property<decimal?>("Line_Discount_Percent");

                    b.Property<string>("Line_Type");

                    b.Property<string>("Loaded_Customer_No");

                    b.Property<string>("Loaded_Disc_Group");

                    b.Property<string>("Loaded_Item_No");

                    b.Property<string>("Loaded_Price_Group");

                    b.Property<decimal>("Minimum_Quantity");

                    b.Property<bool?>("Price_Includes_VAT");

                    b.Property<string>("Sales_Code");

                    b.Property<string>("Sales_Type");

                    b.Property<DateTime>("Starting_Date");

                    b.Property<string>("Type");

                    b.Property<decimal?>("Unit_Price");

                    b.Property<string>("Unit_of_Measure_Code");

                    b.Property<string>("VAT_Bus_Posting_Gr_Price");

                    b.Property<string>("Variant_Code");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CustomerPriceAndLineDisc");
                });

            modelBuilder.Entity("NAVN.Customers", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Application_Method");

                    b.Property<decimal?>("Balance_Due_LCY");

                    b.Property<decimal?>("Balance_LCY");

                    b.Property<string>("Base_Calendar_Code");

                    b.Property<string>("Blocked");

                    b.Property<bool?>("Combine_Shipments");

                    b.Property<string>("Contact");

                    b.Property<string>("Country_Region_Code");

                    b.Property<decimal?>("Credit_Limit_LCY");

                    b.Property<string>("Currency_Code");

                    b.Property<string>("Currency_Filter");

                    b.Property<string>("Customer_Disc_Group");

                    b.Property<string>("Customer_Posting_Group");

                    b.Property<string>("Customer_Price_Group");

                    b.Property<string>("Date_Filter");

                    b.Property<string>("ETag");

                    b.Property<string>("Fin_Charge_Terms_Code");

                    b.Property<string>("Gen_Bus_Posting_Group");

                    b.Property<string>("Global_Dimension_1_Filter");

                    b.Property<string>("Global_Dimension_2_Filter");

                    b.Property<string>("IC_Partner_Code");

                    b.Property<string>("Language_Code");

                    b.Property<DateTime?>("Last_Date_Modified");

                    b.Property<string>("Location_Code");

                    b.Property<string>("Name");

                    b.Property<string>("No");

                    b.Property<string>("Payment_Terms_Code");

                    b.Property<string>("Phone_No");

                    b.Property<string>("Post_Code");

                    b.Property<string>("Reminder_Terms_Code");

                    b.Property<string>("Reserve");

                    b.Property<string>("Responsibility_Center");

                    b.Property<decimal?>("Sales_LCY");

                    b.Property<string>("Salesperson_Code");

                    b.Property<string>("Search_Name");

                    b.Property<string>("Shipping_Advice");

                    b.Property<string>("Shipping_Agent_Code");

                    b.Property<string>("VAT_Bus_Posting_Group");

                    b.HasKey("ID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Sales_Contracts.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Sales_Contracts.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Sales_Contracts.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sales_Contracts.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Sales_Contracts.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NAVN.Customer", b =>
                {
                    b.HasOne("NAVN.Customers", "Bill_to_Customer_No_Link")
                        .WithMany()
                        .HasForeignKey("Bill_to_Customer_No_LinkID");

                    b.HasOne("NAVN.Customers", "Invoice_Disc_Code_Link")
                        .WithMany()
                        .HasForeignKey("Invoice_Disc_Code_LinkID");
                });

            modelBuilder.Entity("NAVN.CustomerPriceAndLineDisc", b =>
                {
                    b.HasOne("NAVN.Customer")
                        .WithMany("CustomerPriceAndLineDisc")
                        .HasForeignKey("CustomerID");
                });
#pragma warning restore 612, 618
        }
    }
}
